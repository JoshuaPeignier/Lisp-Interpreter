%{
#include <cstdio>
#include <iostream>
#include <string>
#include "object.hh"
  
using namespace std;

extern "C" int yylex();
extern "C" int yyparse();
extern "C" FILE *yyin;
extern "C" int yylineno;
extern "C" char *yytext;

void yyerror(char const *msg);

// #define test(s, x) {clog << "Bison: " << #s << ": " << x << endl;}
 #define test(s, x) {}

Object reverse(Object l) {
  Object m = nil();
  for (Object p = l; !null(p); p = cdr(p)) {
    m = cons(car(p), m);
  }
  return m;
}

Object just_read;

%}

/* Declarations */

%token <number_value> Token_number // number_value is a symbolic type, used for the parser
%token <string_value> Token_symbol
%token <string_value> Token_string
%token Token_lpar Token_rpar 
%token Token_nil
%token Token_quote
%token Token_blank

/* %type <listObjectp_value> list_expr */
%type <Object_value> expr
%type <Object_value> list_expr
%type <Object_value> main

%union {
  Object	Object_value;
  int		number_value; // Here you confirm that number_value corresponds to an int
  char		*string_value;
}

%start main             /* the entry point */

%% 
/* Grammar rules */

/* 
http://tldp.org/HOWTO/Lex-YACC-HOWTO-6.html
6.2 Recursion: 'right is wrong'
*/

// You can type as many ) as you want (before an expression ; if you type (- (+ 1 2)))) 3), it will read -, (+ 1 2) and )))3, and with this rule, forgets the ))) ). $2 corresponds to expr ; YYACCEPT stops the parser
main: 
list_rpar expr          {$$ = $2; clog << "Read: " << $2 << endl; just_read = $$; YYACCEPT;}
;

// This fuctions like a grammar, this is the description of the Lisp grammar (which is LL1).
// Each time a reduction is done in the grammar, the following actions (just under there) are done.
//$1 is the first token in the sequence of recognized token
expr:
Token_number            {test(number, $1); $$ = number_to_Object($1);} // You get an int, you transform int into a Lisp Object integer.
| Token_nil             {test(nil, ""); $$ = nil();} // For instance : if the token nil is recognized, return the Lisp Object nil
| Token_symbol		{test(symbol, $1); $$ = symbol_to_Object($1);}
| Token_string          {test(string, $1); $$ = string_to_Object($1);}
| Token_quote expr      {test(quote, ""); $$ = cons(string_to_Object("quote"), $2);}
| Token_lpar list_expr Token_rpar	{$$ = reverse($2);} // Right order is back! :-)
// lpar -> left parenthesis ; etc...
;

// It is a LL1 grammar, functions well when it is left-recursive
list_expr:
%empty			{$$ = nil();}
| list_expr expr 	{$$ = cons($2, $1); } // Watch it: reverse order... :-(
;

list_rpar:
%empty		{}
| list_rpar Token_rpar	{}
;

%%
/* Additional functions */

void yyerror(char const *s) {
  printf("yyerror: %s\n", s);
}

/*

	int yyerror(const char *s) {
	cerr << "ERROR: " << s << " at symbol \"" << yytext << "\"" 
	<< "on line " << yylineno << endl;
	exit(1);
	}

*/

// This file is given to Bison, which is a compiler of grammar. It then creates the file Lisp_yacc.c
// Lisp_yacc.c is the given to g++, to create Lisp_yacc.o ; in the latter, there is a function, yyparse, which launches the parser.
// It is called in main.cc. Parser : reads what we type, and store the corresponding Lisp Objet in just_read. Then, it is evaluated.
